openapi: 3.0.0
info:
  title: Order API
  version: 1.0.0
paths:
  /orders:
    post:
      summary: Create an order
      operationId: createOrder
      tags:
        - Order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrder'
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetails'
    get:
      summary: Get all orders
      operationId: getOrders
      parameters:
        - name: pageNumber
          in: query
          schema:
            type: integer
            default: 0
          description: Page number to retrieve
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 10
          description: Number of items per page
      tags:
        - Order
      responses:
        '200':
          description: A list of orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderPage'
  /orders/{id}:
    get:
      summary: Get order by ID
      operationId: getOrderById
      tags:
        - Order
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetails'
  /orders/{id}/approve:
    patch:
      summary: Approve an order
      operationId: approveOrder
      tags:
        - Order
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Order approved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetails'
  /orders/{id}/delivered:
    patch:
      summary: Mark order as delivered
      operationId: delivered
      tags:
        - Order
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Order marked as delivered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetails'

components:
  schemas:
    Restaurant:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        address:
          $ref: '#/components/schemas/Address'
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
        address:
          $ref: '#/components/schemas/Address'
    Address:
      type: object
      properties:
        street:
          type: string
        number:
          type: string
        city:
          type: string
        state:
          type: string
        postalCode:
          type: string
        country:
          type: string
        notes:
          type: string
      required:
        - street
        - city
        - state
        - postalCode
        - country
    OrderStatus:
      type: string
      enum:
        - PENDING
        - APPROVED
        - DECLINED
        - DELIVERED
    CreateOrder:
      type: object
      properties:
        restaurantId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        total:
          type: number
          format: double
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
      required:
        - restaurantId
        - userId
        - total
        - items
    OrderItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        price:
          type: number
          format: double
        amount:
          type: integer
      required:
        - id
        - price
        - amount
    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        total:
          type: number
          format: double
        restaurantId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/OrderStatus'
    OrderEvent:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/OrderStatus'
        dateTime:
          type: string
          format: date-time
    OrderDetails:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        total:
          type: number
          format: double
        status:
          $ref: '#/components/schemas/OrderStatus'
        restaurant:
          $ref: '#/components/schemas/Restaurant'
        user:
          $ref: '#/components/schemas/User'
        events:
          type: array
          items:
            $ref: '#/components/schemas/OrderEvent'
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
    Pageable:
      type: object
      properties:
        sort:
          $ref: '#/components/schemas/Sort'
        offset:
          type: integer
          description: Current offset
        pageNumber:
          type: integer
          description: Current page number
        pageSize:
          type: integer
          description: Number of elements per page
        unpaged:
          type: boolean
          description: Indicates if this is a pageable request
        paged:
          type: boolean
          description: Indicates if this is a paged request
    Sort:
      type: object
      properties:
        sorted:
          type: boolean
          description: Indicates if sorting is enabled
        unsorted:
          type: boolean
          description: Indicates if sorting is not enabled
        empty:
          type: boolean
          description: Indicates if the sort is empty
    PageRequest:
      type: object
      properties:
        pageNumber:
          type: integer
          format: int32
          description: The page number to retrieve
          default: 0
        pageSize:
          type: integer
          format: int32
          description: The number of items per page
          default: 10
    OrderPage:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Order'
        pageable:
          $ref: '#/components/schemas/Pageable'
        totalPages:
          type: integer
          description: Total number of pages
        totalElements:
          type: integer
          description: Total number of elements
        last:
          type: boolean
          description: Indicates if this is the last page
        size:
          type: integer
          description: Number of elements per page
        number:
          type: integer
          description: Current page number
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
          description: Indicates if this is the first page
        numberOfElements:
          type: integer
          description: Number of elements currently on this page